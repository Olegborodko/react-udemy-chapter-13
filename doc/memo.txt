memo хук - оборачивается кругом компонента, и следит за propсами компонента. И когда компонент перезапускается memo смотрит на старый prop и новый. И если пропы одинаковы он предотвращает перерисовку компонента.

Тоесть в таком случае - 
const Counter = memo(function Counter({ initialCount }) { ... }
export default Counter;

function App() {
return <Counter initialCount={chosenCount} />
}

компонент будет перегружаться только если меняется initialCount,
либо внутренее состояние компонента. Компонент Counter не будет перерендериваться если перерендеривается App компонент.
Так-же логически что все дочерные компоненты у Counter не будут перерисованы снова.

Можно оподумать что в функцию memo стоит обернуть все компоненты,
но это не так. Стоит подумать о компонентах наивысшего уровня.

Если обернуть в memo все компоненты то reactу понадобится проверять все пропсы у всех компонентов.Это тоже затратно по ресурсам. 

И уж точно не стоит оборачивать компоненты которые почти всегда меняют props. В таком случае по итогу потратится еще больше ресурсов чем без memo.

// ===========================

Когда использовать memo:
1. Компонент ререндерится слишком часто без необходимости.
2. Компонент зависит от сложных и ресурсоемких вычислений.
3. Компонент получает данные, которые редко меняются.

Важные моменты:
- memo работает только с функциональными компонентами.
- Если пропсы содержат функции или объекты, то ререндер может происходить чаще, чем ожидается, поскольку каждый раз создаются новые ссылки на них. В таких случаях для лучшей оптимизации можно использовать useCallback или useMemo

Использование memo — это мощный инструмент оптимизации, но его применение нужно тщательно продумывать, чтобы не ухудшить производительность ненужными вычислениями или усложнением кода.